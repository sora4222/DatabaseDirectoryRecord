import com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer

plugins {
    id 'java'
    id 'application'
    id "io.freefair.lombok" version "4.1.4"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "nebula.rpm" version "8.0.3"
    id "nebula.deb" version "8.0.3"
    id 'edu.sc.seis.launch4j' version '2.4.6'

}

group 'com.sora4222.database'
version '1.0.1-Alpha'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

application {
    mainClassName = 'com.sora4222.database.DirectoryRecorder'
}

jar {
    manifest {
        attributes(
                'Main-Class': application.mainClassName
        )
    }
}

dependencies {
    // Databases
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.17'

    //Caching
    compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'

    // For Configuration
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.9'
    
    // Logging
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.0'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.9'
    implementation 'com.vlkan.log4j2:log4j2-logstash-layout:0.19'

    // Logstash layout: https://github.com/vy/log4j2-logstash-layout
    compile group:'com.vlkan.log4j2', name:'log4j2-logstash-layout', version:'0.19'

    // Testing units
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.1'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.1'
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.0.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.1'

    // For downloading a file
    testCompile group: 'commons-io', name: 'commons-io', version: '2.6'

    //Hexadecimal conversion
    compile group: 'commons-codec', name: 'commons-codec', version: '1.13'

}

test {
    systemProperty "databasePassword", System.getProperty("databasePassword")
    systemProperty "databaseUsername", System.getProperty("databaseUsername")
    systemProperty "jdbcConnectionUrl", System.getProperty("jdbcConnectionUrl")
    systemProperty "dataTable", System.getProperty("dataTable")

    minHeapSize = "256m"
    maxHeapSize = "4g"

    useJUnitPlatform()
}

shadowJar {
    transform(Log4j2PluginsCacheFileTransformer)
}

launch4j {
    mainClassName = application.mainClassName
    jar = "${projectDir}/build/libs/${project.tasks.shadowJar.outputs.files.singleFile.name}"

}

task buildRpm(type: Rpm) {
    dependsOn shadowJar
    version = project.version.toString().replace('-','_')

    into '/opt/database_directory_recorder'

    from(shadowJar.outputs.files.singleFile) {
        into 'lib'
        fileMode = 0550
    }
    from('scripts') {
        into 'scripts'
        fileMode = 0555
    }
    from('src/main/resources') {
        fileType CONFIG | NOREPLACE
        into 'conf'
    }
    link("/opt/database_directory_recorder/lib/database_directory_recorder.jar" ,
            "/opt/database_directory_recorder/lib/" + shadowJar.outputs.files.singleFile.name)
}

task buildDeb(type: Deb) {
    dependsOn shadowJar

    packageName project.name.toLowerCase()
    version = project.version.toString()
    into '/opt/database_directory_recorder'

    from(shadowJar.outputs.files.singleFile) {
        into 'lib'
        fileMode = 0550
    }
    from('scripts') {
        into 'scripts'
        fileMode = 0555
    }
    from('src/main/resources') {
        fileType CONFIG | NOREPLACE
        into 'conf'
    }
    link("/opt/database_directory_recorder/lib/database_directory_recorder.jar" ,
            "/opt/database_directory_recorder/lib/" + shadowJar.outputs.files.singleFile.name)
}


}

createExe.dependsOn(shadowJar)